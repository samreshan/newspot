// UI helper functions for enhanced experience
function showLoading(buttonId) {
  const button = document.getElementById(buttonId);
  button.classList.add('loading');
}

function hideLoading(buttonId) {
  const button = document.getElementById(buttonId);
  button.classList.remove('loading');
}

function showAIOutput(title) {
  const output = document.getElementById('aiOutput');
  const titleElement = document.getElementById('aiOutputTitle');
  const loadingAnimation = document.getElementById('loadingAnimation');
  const result = document.getElementById('aiResult');
  
  titleElement.textContent = title;
  loadingAnimation.style.display = 'flex';
  result.style.display = 'none';
  result.innerHTML = ''; // Clear previous content
  output.classList.add('show');
}

function hideAILoading() {
  const loadingAnimation = document.getElementById('loadingAnimation');
  const result = document.getElementById('aiResult');
  
  loadingAnimation.style.display = 'none';
  result.style.display = 'block';
}

function closeAIOutput() {
  const output = document.getElementById('aiOutput');
  output.classList.remove('show');
}

// Enhanced AI call function with better UI integration
async function callAI(prompt, buttonId, title) {
  showLoading(buttonId);
  showAIOutput(title);
  
  try {
    const response = await fetch("/ai-helper/", {
      method: "POST",
      headers: { "Content-Type": "application/json" },
      body: JSON.stringify({ prompt }),
    });
    
    const data = await response.json();
    
    hideLoading(buttonId);
    hideAILoading();
    
    const resultText = document.getElementById("aiResult");

    if (data.text) {
      // Convert AI response (markdown) into HTML
      let htmlContent = marked.parse(data.text);

      // Custom headers depending on type
      if (title.includes('Translation')) {
        resultText.innerHTML = `
          <h4 style="color: var(--primary-color); margin-bottom: 1rem;">English Translation</h4>
          <div class="ai-markdown">${htmlContent}</div>
          <p style="margin-top: 1rem; font-size: 0.9rem; color: var(--text-secondary);">Translation completed using AI.</p>
        `;
      } else if (title.includes('Summary')) {
        resultText.innerHTML = `
          <h4 style="color: var(--primary-color); margin-bottom: 1rem;">Article Summary</h4>
          <div class="ai-markdown">${htmlContent}</div>
          <p style="margin-top: 1rem; font-size: 0.9rem; color: var(--text-secondary);">Summary generated by AI analysis.</p>
        `;
      } else {
        resultText.innerHTML = `<div class="ai-markdown">${htmlContent}</div>`;
      }
    } else {
      resultText.innerHTML = `<p style="color: var(--text-secondary);">No response received. Please try again.</p>`;
    }
    
  } catch (error) {
    console.error('AI call failed:', error);
    hideLoading(buttonId);
    hideAILoading();
    
    document.getElementById("aiResult").innerHTML = `
      <p style="color: #ef4444;">Failed to get AI response. Please check your connection and try again.</p>
    `;
  }
}


// Your existing functions with enhanced UI integration
function translateToEnglish() {
  const text = [...document.querySelectorAll(".content-paragraph")]
    .map((p) => p.innerText)
    .join("\n\n");
  callAI("Translate this Nepali article into English:\n\n" + text, 'translateBtn', 'Translation Result');
}

function summarizeArticle() {
  const text = [...document.querySelectorAll(".content-paragraph")]
    .map((p) => p.innerText)
    .join("\n\n");
  callAI("Summarize this news article in a few bullet points:\n\n" + text, 'summarizeBtn', 'Article Summary');
}

// Reading progress - your existing logic
window.addEventListener("scroll", () => {
  const content = document.querySelector(".article-content");
  if (!content) return;
  const scrolled = window.scrollY;
  const contentTop = content.offsetTop;
  const contentHeight = content.offsetHeight;
  const windowHeight = window.innerHeight;
  const progress = Math.max(
    0,
    Math.min(
      100,
      ((scrolled - contentTop + windowHeight) / contentHeight) * 100
    )
  );
  document.getElementById("readingProgress").style.width = progress + "%";
});

// Scroll indicator - your existing logic
window.addEventListener("scroll", () => {
  const scrollable = document.documentElement.scrollHeight - window.innerHeight;
  const scrolled = window.scrollY;
  const progress = (scrolled / scrollable) * 80; // 80% of indicator height
  const scrollThumb = document.getElementById("scrollThumb");
  if (scrollThumb) {
    scrollThumb.style.transform = `translateY(${progress}px)`;
  }
});

// Smooth scrolling - your existing setting
document.documentElement.style.scrollBehavior = "smooth";

// Paragraph highlight observer - your existing logic
const observerOptions = {
  root: null,
  rootMargin: "-20% 0px -70% 0px",
  threshold: 0,
};

const paragraphObserver = new IntersectionObserver((entries) => {
  entries.forEach((entry) => {
    if (entry.isIntersecting) {
      entry.target.style.color = "var(--text-primary)";
    } else {
      entry.target.style.color = "var(--text-secondary)";
    }
  });
}, observerOptions);

// Initialize paragraph observer - your existing logic
document.addEventListener("DOMContentLoaded", () => {
  document.querySelectorAll(".content-paragraph").forEach((p) => {
    paragraphObserver.observe(p);
  });
});

// Enhanced UI interactions
document.addEventListener('click', function(event) {
  const aiOutput = document.getElementById('aiOutput');
  const floatingActions = document.getElementById('floatingActions');
  
  if (aiOutput.classList.contains('show') && 
      !aiOutput.contains(event.target) && 
      !floatingActions.contains(event.target)) {
    closeAIOutput();
  }
});

// Keyboard shortcuts
document.addEventListener('keydown', function(event) {
  if (event.key === 'Escape') {
    closeAIOutput();
  } else if (event.ctrlKey && event.key === 't') {
    event.preventDefault();
    translateToEnglish();
  } else if (event.ctrlKey && event.key === 's') {
    event.preventDefault();
    summarizeArticle();
  }
});

// Intersection Observer for floating actions visibility
const actionObserver = new IntersectionObserver((entries) => {
  const floatingActions = document.getElementById('floatingActions');
  entries.forEach(entry => {
    if (entry.isIntersecting) {
      floatingActions.style.opacity = '1';
    } else {
      floatingActions.style.opacity = '0.7';
    }
  });
});

// Initialize action observer
const articleContent = document.querySelector('.article-content');
if (articleContent) {
  actionObserver.observe(articleContent);
}